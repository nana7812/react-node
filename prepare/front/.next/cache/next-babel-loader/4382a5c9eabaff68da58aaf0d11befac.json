{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, takeLatest } from \"redux-saga/effects\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: \"ADD_POST_SUCCESS\",\n            data: result.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: \"ADD_POST_FAILURE\",\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(\"ADD_POST_REQUEST\", addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/gimjeong-eum/react-node/prepare/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","all","takeLatest","addPostAPI","data","axios","post","action","delay","put","type","result","response","fork"],"mappings":";;oDAMUA,O;qDAgBAC,Y;qDAIeC,Q;;AA1BzB,SAASC,GAAT,EAAcC,UAAd,QAAgC,oBAAhC;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOC,KAAK,CAACC,IAAN,CAAW,WAAX,EAAwBF,IAAxB,CAAP;AACD;;AAED,SAAUN,OAAV,CAAkBS,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMC,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMC,GAAG,CAAC;AACRC,YAAAA,IAAI,EAAE,kBADE;AAERN,YAAAA,IAAI,EAAEO,MAAM,CAACP;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASI,iBAAMK,GAAG,CAAC;AACRC,YAAAA,IAAI,EAAE,kBADE;AAERN,YAAAA,IAAI,EAAE,YAAIQ,QAAJ,CAAaR;AAFX,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUL,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMG,UAAU,CAAC,kBAAD,EAAqBJ,OAArB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACY,IAAI,CAACd,YAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, takeLatest } from \"redux-saga/effects\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(\"ADD_POST_REQUEST\", addPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost)]);\n}\n"]},"metadata":{},"sourceType":"module"}