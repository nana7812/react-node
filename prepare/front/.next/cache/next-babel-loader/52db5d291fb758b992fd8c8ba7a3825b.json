{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/gimjeong-eum/react-node/prepare/front/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport AppLayout from \"../components/AppLayout\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\n\nvar Home = function Home() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePosts = _useSelector2.hasMorePosts,\n      loadPostsLoading = _useSelector2.loadPostsLoading;\n\n  useEffect(function () {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []); //다시 로딩\n  // useEffect(() => {\n  //   function onScroll() {\n  //     if (\n  //       window.scrollY + document.documentElement.clientHeight >\n  //       document.documentElement.scrollHeight - 300\n  //     ) {\n  //       if (hasMorePost && !loadPostsLoading) {\n  //         dispatch({\n  //           type: LOAD_POSTS_REQUEST,\n  //           data: mainPosts[mainPosts.length - 1].id,\n  //         });\n  //       }\n  //     }\n  //   }\n  //   window.addEventListener(\"scroll\", onScroll);\n  //   return () => {\n  //     window.removeEventListener(\"scroll\", onScroll);\n  //   };\n  // }, [mainPosts, hasMorePost, loadPostsLoading]);\n\n  useEffect(function () {\n    //내가 스크롤해서 어느 정도 위치에 있는지 판단\n    function onScroll() {\n      //높이 1- 위에서 부터 얼마나 내렸는지 2-화면에 보이는 부분 길이 3- 총 길이\n      //1+2 = 3 -> 끝까지 내렸는지 알 수 있음\n      //console.log(window.scrollY,document.documentElement.clientHeight,document.documentElement.scrollHeight);\n      //밑에서 300px 남았을 때 추가\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostLoading) {\n          //로딩되고 있는게 아닐때\n          dispatch({\n            type: LOAD_POSTS_REQUEST\n          });\n        }\n      }\n    } //스크롤 이벤트 리스너\n\n\n    window.addEventListener(\"scroll\", onScroll); //**return**   없애주기  안해주면 메모리에 쌓여있음\n\n    return function () {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading]);\n  return __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, me && __jsx(PostForm, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 14\n    }\n  }), mainPosts.map(function (c) {\n    return __jsx(PostCard, {\n      key: c.id,\n      post: c,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    });\n  }));\n};\n\n_s(Home, \"oqG10cifXvQtI8RQRta7gdIVAso=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/gimjeong-eum/react-node/prepare/front/pages/index.js"],"names":["React","useEffect","useSelector","useDispatch","PostForm","PostCard","AppLayout","LOAD_POSTS_REQUEST","Home","dispatch","state","user","me","post","mainPosts","hasMorePosts","loadPostsLoading","type","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","loadPostLoading","addEventListener","removeEventListener","map","c","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AACjB,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;;AADiB,qBAEFD,WAAW,CAAC,UAACQ,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAFT;AAAA,MAETC,EAFS,gBAETA,EAFS;;AAAA,sBAGqCV,WAAW,CAC/D,UAACQ,KAAD;AAAA,WAAWA,KAAK,CAACG,IAAjB;AAAA,GAD+D,CAHhD;AAAA,MAGTC,SAHS,iBAGTA,SAHS;AAAA,MAGEC,YAHF,iBAGEA,YAHF;AAAA,MAGgBC,gBAHhB,iBAGgBA,gBAHhB;;AAOjBf,EAAAA,SAAS,CAAC,YAAM;AACdQ,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEV;AADC,KAAD,CAAR;AAGD,GAJQ,EAIN,EAJM,CAAT,CAPiB,CAajB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAN,EAAAA,SAAS,CAAC,YAAM;AACd;AACA,aAASiB,QAAT,GAAoB;AAClB;AACA;AACA;AACA;AACA,UACEC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GACAF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAF1C,EAGE;AACA,YAAIT,YAAY,IAAI,CAACU,eAArB,EAAsC;AACpC;AACAhB,UAAAA,QAAQ,CAAC;AACPQ,YAAAA,IAAI,EAAEV;AADC,WAAD,CAAR;AAGD;AACF;AACF,KAlBa,CAmBd;;;AACAY,IAAAA,MAAM,CAACO,gBAAP,CAAwB,QAAxB,EAAkCR,QAAlC,EApBc,CAqBd;;AACA,WAAO,YAAM;AACXC,MAAAA,MAAM,CAACQ,mBAAP,CAA2B,QAA3B,EAAqCT,QAArC;AACD,KAFD;AAGD,GAzBQ,EAyBN,CAACH,YAAD,EAAeC,gBAAf,CAzBM,CAAT;AA0BA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,EAAE,IAAI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADT,EAEGE,SAAS,CAACc,GAAV,CAAc,UAACC,CAAD;AAAA,WACb,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAC,CAACC,EAAjB;AAAqB,MAAA,IAAI,EAAED,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADa;AAAA,GAAd,CAFH,CADF;AAQD,CApED;;GAAMrB,I;UACaL,W,EACFD,W,EACuCA,W;;;KAHlDM,I;AAsEN,eAAeA,IAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport AppLayout from \"../components/AppLayout\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const { me } = useSelector((state) => state.user);\n  const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector(\n    (state) => state.post\n  );\n\n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST,\n    });\n  }, []);\n\n  //다시 로딩\n  // useEffect(() => {\n  //   function onScroll() {\n  //     if (\n  //       window.scrollY + document.documentElement.clientHeight >\n  //       document.documentElement.scrollHeight - 300\n  //     ) {\n  //       if (hasMorePost && !loadPostsLoading) {\n  //         dispatch({\n  //           type: LOAD_POSTS_REQUEST,\n  //           data: mainPosts[mainPosts.length - 1].id,\n  //         });\n  //       }\n  //     }\n  //   }\n  //   window.addEventListener(\"scroll\", onScroll);\n  //   return () => {\n  //     window.removeEventListener(\"scroll\", onScroll);\n  //   };\n  // }, [mainPosts, hasMorePost, loadPostsLoading]);\n\n  useEffect(() => {\n    //내가 스크롤해서 어느 정도 위치에 있는지 판단\n    function onScroll() {\n      //높이 1- 위에서 부터 얼마나 내렸는지 2-화면에 보이는 부분 길이 3- 총 길이\n      //1+2 = 3 -> 끝까지 내렸는지 알 수 있음\n      //console.log(window.scrollY,document.documentElement.clientHeight,document.documentElement.scrollHeight);\n      //밑에서 300px 남았을 때 추가\n      if (\n        window.scrollY + document.documentElement.clientHeight >\n        document.documentElement.scrollHeight - 300\n      ) {\n        if (hasMorePosts && !loadPostLoading) {\n          //로딩되고 있는게 아닐때\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n          });\n        }\n      }\n    }\n    //스크롤 이벤트 리스너\n    window.addEventListener(\"scroll\", onScroll);\n    //**return**   없애주기  안해주면 메모리에 쌓여있음\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading]);\n  return (\n    <AppLayout>\n      {me && <PostForm />}\n      {mainPosts.map((c) => (\n        <PostCard key={c.id} post={c} />\n      ))}\n    </AppLayout>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}