{"ast":null,"code":"// export const initialState = {\n//   mainPosts: [\n//     {\n//       id: 1,\n//       User: {\n//         id: 1,\n//         nickname: \"아민\",\n//       },\n//       content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n//       Images: [\n//         {\n//           src:\n//             \"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTA3MDFfMTUg%2FMDAxNjI1MTE3MjY2NTgx.OWcyyjzjwEbXAITwROfEtSAR3c_3nwxAevS20PctNsgg.UK0xaxSiFeHEK-Fny5sKY7Cdv7yEOJCJ1-4NS4S_5VAg.PNG.hyup_365%2Fimage.png&type=a340\",\n//         },\n//         {\n//           src:\n//             \"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTA2MjlfNSAg%2FMDAxNjI0OTE2NjY1NDYz.zTYsJ2hiH43VwiR-oOTeNQc02L0gAtkOSoq3d4t_1Cwg.C3bHEXUT76chFki9OrXYf_6Tb8-D4C3DZlc-1sX1lNUg.PNG.dorun_lab%2FContents_Frame%25281080X1080%2529.png&type=a340\",\n//         },\n//         {\n//           src:\n//             \"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2F20160328_76%2F1eunnue_1459164099849AijQI_JPEG%2F%25C4%25B3%25B8%25AF%25C5%25CD_%25289%2529.jpg&type=sc960_832\",\n//         },\n//       ],\n//       Comments: [\n//         {\n//           User: {\n//             nickname: \"amin\",\n//           },\n//           content: \"우와 신기하다\",\n//         },\n//         {\n//           User: {\n//             nickname: \"am\",\n//           },\n//           content: \"우와 수요일\",\n//         },\n//       ],\n//     },\n//   ],\n//   imagePaths: [],\n//   addPostLoading: false,\n//   addPostDone: false,\n//   addPostError: null,\n//   addCommentLoading:false,\n//   addCommentDone:false,\n//   addCommentError:null,\n// };\n// const dummpyPost = {\n//   id: 2,\n//   User: {\n//     id: 2,\n//     nickname: \"더미\",\n//   },\n//   content: \"더미 데이터 게시글 #해시태그 #익스프레스\",\n//   Images: [\n//     {\n//       src:\n//         \"https://postfiles.pstatic.net/MjAyMTAyMTZfMTE4/MDAxNjEzNDAxNDI0MDQ3.wE85KV2Oj0qDsCQcLzzkUX0te85iu9axBfv-u29f6Ggg.ZrCK2gsHTidwlEdGRNnLYeJf8T8td1CXwL7EgvHu6Uog.JPEG.zcjswkz0812/IMG_2683.jpg?type=w966\",\n//     },\n//     {\n//       src:\n//         \"https://postfiles.pstatic.net/MjAyMTAyMTZfMzAg/MDAxNjEzNDAxNDIyMjYy.iF1C2Htw4K1x70_BAubG32fodXAgY2GFdw3udMjlS5Eg.xsrMd6c9NqrpnMus02PkjtcSAvhTs8mWfv20BVlpTuEg.JPEG.zcjswkz0812/IMG_2640.jpg?type=w966\",\n//     },\n//     {\n//       src:\n//         \"https://postfiles.pstatic.net/MjAyMTAyMTZfMjM1/MDAxNjEzNDAxNDIxNTE4.x3yaMnKDCl0ZQ-7YNrxrF8RgqyhkkuU7DR5gDV_FF-Yg.c6EsGYqzXzMvEKM_vHbAbc7A0MeBIcLfC76wYvZz0t8g.JPEG.zcjswkz0812/IMG_2642.jpg?type=w966\",\n//     },\n//   ],\n//   Comments: [\n//     {\n//       User: {\n//         nickname: \"amin\",\n//       },\n//       content: \"더미신기하다\",\n//     },\n//     {\n//       User: {\n//         nickname: \"am\",\n//       },\n//       content: \"더미 수요일\",\n//     },\n//   ],\n// };\n// export const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\n// export const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\n// export const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n// export const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\n// export const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\n// export const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n// export const addPostRequestAction = (data) => {\n//   return {\n//     type: ADD_POST_REQUEST,\n//     data: data,\n//   };\n// };\n// export const addCommentRequestAction = (data) => {\n//   return {\n//     type: ADD_COMMENT_REQUEST,\n//     data: data,\n//   };\n// };\n// const reducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case ADD_POST_REQUEST:\n//       return {\n//         ...state,\n//         addPostLoading: true,\n//         addPostDone: false,\n//         addPostError: null,\n//       };\n//     case ADD_POST_SUCCESS:\n//       return {\n//         ...state,\n//         mainPosts: [dummpyPost, ...state.mainPosts],\n//         addPostLoading: false,\n//         addPostDone: true,\n//         addPostError: null,\n//       };\n//     case ADD_POST_FAILURE:\n//       return {\n//         ...state,\n//         addPostLoading: false,\n//         addPostDone: false,\n//         addPostError: action.error,\n//       };\n//     case ADD_COMMENT_REQUEST:\n//       return {\n//         ...state,\n//         addCommentLoading: true,\n//         addCommentDone: false,\n//         addCommentError: null,\n//       };\n//     case ADD_COMMENT_SUCCESS:\n//       return {\n//         ...state,\n//         addCommentLoading: false,\n//         addCommentDone: true,\n//         addCommentError: null,\n//       };\n//     case ADD_COMMENT_FAILURE:\n//       return {\n//         ...state,\n//         addCommentLoading: false,\n//         addCommentDone: false,\n//         addCommentError: action.error,\n//       };\n//     default:\n//       return state;\n//   }\n// };\nimport shortId from \"shortid\";\nimport faker from \"faker\";\nimport produce from \"../util/produce\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  }\n}); // 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(dummyPost(action.data));\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["/Users/gimjeong-eum/react-node/prepare/front/reducers/post.js"],"names":["shortId","faker","produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","post","find","postId"],"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","sourcesContent":["// export const initialState = {\n//   mainPosts: [\n//     {\n//       id: 1,\n//       User: {\n//         id: 1,\n//         nickname: \"아민\",\n//       },\n//       content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n//       Images: [\n//         {\n//           src:\n//             \"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTA3MDFfMTUg%2FMDAxNjI1MTE3MjY2NTgx.OWcyyjzjwEbXAITwROfEtSAR3c_3nwxAevS20PctNsgg.UK0xaxSiFeHEK-Fny5sKY7Cdv7yEOJCJ1-4NS4S_5VAg.PNG.hyup_365%2Fimage.png&type=a340\",\n//         },\n//         {\n//           src:\n//             \"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTA2MjlfNSAg%2FMDAxNjI0OTE2NjY1NDYz.zTYsJ2hiH43VwiR-oOTeNQc02L0gAtkOSoq3d4t_1Cwg.C3bHEXUT76chFki9OrXYf_6Tb8-D4C3DZlc-1sX1lNUg.PNG.dorun_lab%2FContents_Frame%25281080X1080%2529.png&type=a340\",\n//         },\n//         {\n//           src:\n//             \"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2F20160328_76%2F1eunnue_1459164099849AijQI_JPEG%2F%25C4%25B3%25B8%25AF%25C5%25CD_%25289%2529.jpg&type=sc960_832\",\n//         },\n//       ],\n//       Comments: [\n//         {\n//           User: {\n//             nickname: \"amin\",\n//           },\n//           content: \"우와 신기하다\",\n//         },\n//         {\n//           User: {\n//             nickname: \"am\",\n//           },\n//           content: \"우와 수요일\",\n//         },\n//       ],\n//     },\n//   ],\n//   imagePaths: [],\n//   addPostLoading: false,\n//   addPostDone: false,\n//   addPostError: null,\n//   addCommentLoading:false,\n//   addCommentDone:false,\n//   addCommentError:null,\n// };\n\n// const dummpyPost = {\n//   id: 2,\n//   User: {\n//     id: 2,\n//     nickname: \"더미\",\n//   },\n//   content: \"더미 데이터 게시글 #해시태그 #익스프레스\",\n//   Images: [\n//     {\n//       src:\n//         \"https://postfiles.pstatic.net/MjAyMTAyMTZfMTE4/MDAxNjEzNDAxNDI0MDQ3.wE85KV2Oj0qDsCQcLzzkUX0te85iu9axBfv-u29f6Ggg.ZrCK2gsHTidwlEdGRNnLYeJf8T8td1CXwL7EgvHu6Uog.JPEG.zcjswkz0812/IMG_2683.jpg?type=w966\",\n//     },\n//     {\n//       src:\n//         \"https://postfiles.pstatic.net/MjAyMTAyMTZfMzAg/MDAxNjEzNDAxNDIyMjYy.iF1C2Htw4K1x70_BAubG32fodXAgY2GFdw3udMjlS5Eg.xsrMd6c9NqrpnMus02PkjtcSAvhTs8mWfv20BVlpTuEg.JPEG.zcjswkz0812/IMG_2640.jpg?type=w966\",\n//     },\n//     {\n//       src:\n//         \"https://postfiles.pstatic.net/MjAyMTAyMTZfMjM1/MDAxNjEzNDAxNDIxNTE4.x3yaMnKDCl0ZQ-7YNrxrF8RgqyhkkuU7DR5gDV_FF-Yg.c6EsGYqzXzMvEKM_vHbAbc7A0MeBIcLfC76wYvZz0t8g.JPEG.zcjswkz0812/IMG_2642.jpg?type=w966\",\n//     },\n//   ],\n//   Comments: [\n//     {\n//       User: {\n//         nickname: \"amin\",\n//       },\n//       content: \"더미신기하다\",\n//     },\n//     {\n//       User: {\n//         nickname: \"am\",\n//       },\n//       content: \"더미 수요일\",\n//     },\n//   ],\n// };\n\n// export const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\n// export const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\n// export const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\n// export const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\n// export const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\n// export const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\n// export const addPostRequestAction = (data) => {\n//   return {\n//     type: ADD_POST_REQUEST,\n//     data: data,\n//   };\n// };\n\n// export const addCommentRequestAction = (data) => {\n//   return {\n//     type: ADD_COMMENT_REQUEST,\n//     data: data,\n//   };\n// };\n\n// const reducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case ADD_POST_REQUEST:\n//       return {\n//         ...state,\n//         addPostLoading: true,\n//         addPostDone: false,\n//         addPostError: null,\n//       };\n//     case ADD_POST_SUCCESS:\n//       return {\n//         ...state,\n//         mainPosts: [dummpyPost, ...state.mainPosts],\n//         addPostLoading: false,\n//         addPostDone: true,\n//         addPostError: null,\n//       };\n//     case ADD_POST_FAILURE:\n//       return {\n//         ...state,\n//         addPostLoading: false,\n//         addPostDone: false,\n//         addPostError: action.error,\n//       };\n//     case ADD_COMMENT_REQUEST:\n//       return {\n//         ...state,\n//         addCommentLoading: true,\n//         addCommentDone: false,\n//         addCommentError: null,\n//       };\n//     case ADD_COMMENT_SUCCESS:\n//       return {\n//         ...state,\n//         addCommentLoading: false,\n//         addCommentDone: true,\n//         addCommentError: null,\n//       };\n//     case ADD_COMMENT_FAILURE:\n//       return {\n//         ...state,\n//         addCommentLoading: false,\n//         addCommentDone: false,\n//         addCommentError: action.error,\n//       };\n\n//     default:\n//       return state;\n//   }\n// };\n\nimport shortId from \"shortid\";\nimport faker from \"faker\";\n\nimport produce from \"../util/produce\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n};\n\nexport const generateDummyPost = (number) =>\n  Array(number)\n    .fill()\n    .map(() => ({\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName(),\n      },\n      content: faker.lorem.paragraph(),\n      Images: [\n        {\n          src: faker.image.image(),\n        },\n      ],\n      Comments: [\n        {\n          User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName(),\n          },\n          content: faker.lorem.sentence(),\n        },\n      ],\n    }));\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst dummyPost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\",\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\",\n  },\n});\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}